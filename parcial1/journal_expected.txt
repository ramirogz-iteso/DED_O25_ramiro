
= = = = = = = = = = = = = = = = O U R    D I A R Y  = = = = = = = = = = = = = = = =

###################
   W E E K   # 1
###################
Class # 1 ======================= Jan 21st
"Intro to DED, review class rules. Install VSCODE - LiveShare - GitHub. 
Create and share their first repositories with professor. Learn how to compile 
and use the terminal inside VS Code.
Used: hello_world.c to fix small compile issues. terminal_intro.txt to 
review commands. Homework, complete their Repositories and make sure gcc is 
installed and running."																
=================================

Class # 2 ======================= Jan 24th
Reviewed Pointers intro, see "3. Introduction to pointers.pptx". We review and 
complete pointers_basics.c. It had a small excercise for them. The final version
of the file is already in GitHub. The tutoring session schedule was agreed upon, 
see post above. No homework, just keep practicing and getting familiar with everything.
=================================

###################
   W E E K   # 2
###################
Class # 3 ======================= Jan 28th
4. Pointers value vs reference and pointer arithmetic.pptx. 
Then "value_vs_reference.c" | "value_vs_reference_practice.c | "pointer_math.c" 
| "pointer_math_practice.c" in this order. 
The idea is to go thru all files during class and the solved examples will be 
fully reviewed next class once all have time to process it.																
=================================

Class # 4 ======================= Jan 31st
"Showed solution for pointer_math_practices.c excercise together. 
The 4th excercise is very similar to the exam, so that still remains not shown.
Reviewed ""5. NULL pointer and VOID pointer.pptx"", slide already in the Files section here.
Reviewed together : ""void_ptr_basic.c"" and ""void_struct_student.c"																
=================================

###################
   W E E K   # 3
###################
Class # 5 ======================= Feb 4th
"First Half of the class: Review structs again, file ""structs.c"". 
Put all the class to practice almost everything we have seen so far in 
"structs_practice_cars.c" where we will create an array of 4 cars and create 
functions to set individual cars and another to print all the array using pointe
arithmetic over a struct array. Use NULL pointer validations. 
Use string.h in case they don't remember.
Second half of the class: Function_pointers.ppt and get all the way thru 
""func_ptr.c"" as intro. Homework, study function pointers and complete 
structs_practice_cars.c if needed.

=================================

Class # 6 =======================
Reviewed solution for structs_practice_cars.c together.
2nd pass to function pointers theory (the same of last class)
Understood "function_pointers.c" and class got to work on "func_ptr_practice.c"
NEXT CLASS we are looking into double pointers (**) so please study this weekend.

=================================
###################
   W E E K   # 4
###################

Class # 7 =======================
Review the solution of func_ptr_practice
We reviewed double pointer theory using the first link we found in google.
Remember to use the university of youtube, is really good.
Reviewed array_pointers_dptr.c together.
HOMEWORK: review that file again on your own, its really important.

=================================

Class # 8 =======================
Challange.c All the class was spent with the students doing their best to solved
this file. This is a good example of how challenging the exam will be.

=================================

###################
   W E E K   # 5
###################

Class # 9 =======================
Solution to Challenge.c
We reviewed Random.c to generate random numbers, this will be useful in the project.
We reviewed the project description.

=================================

Class # 10 =======================
Malloc / Calloc / Free
Exam1 day was here, but I wanted to use B class instead of T. 
We started looking Dynamic memory and reviewed "Dynamic Memory.c"
The powerpoint has some exercise to practice and verify what malloc / calloc and free does.
PENDING I need to code the solution for this and update the slides.

=================================

###################
   W E E K   # 6
###################

Class # 11 =======================
Exam1 day!
=================================

Class # 12 =======================
We reviewed the exam solutions, exercise by exercise. Everyone who completed the examen in FULL, and send
it to the professor AND completed all his previous excercise was considered for up to 20 points.
Took a quick glance at the malloc powerpoint to refresh the topic before covering:
malloc.c where we practice how to create new variables with dynamic memory.
We continued with "8. Matrix and 2D arrays with malloc.ppt" to understand how 2D arrays work.
Started working in malloc2d.c to learn how to use 2D Arrays. Solution will be shared next class.
=================================

###################
   W E E K   # 7
###################

Class # 13 =======================
Start class reviewing the solution for malloc2d.c the complete file is now in GITHUB to study.
We reviewed how to expand the idea of 2D matrixes to create arrays of pointers (pointers to structs)
We started the file "farm.c" which has a nice example of how we can dynamically create and expand the size
of an array made of struct pointers. The structs are created on demand so the memory is used really efficiently.

=================================

Class # 14 =======================
==================================
We saw the solution for the entire farm excercise. You can find it at farm.c. (complete version)
Linked List! we saw the theory of why linked list are important and review all operatiosn in the
whiteboard (add_to_end, add_before, print_or_traverse etc).
We are going to be working for the next two classes on linkedlist.c, your task is to complete it.
For those who missed the class and the live explanation on the board, I made my previous classes
avaialable in teams (in spanish).

###################
   W E E K   # 8
###################

Class # 15 =======================
==================================
Finishing linkedlist.c, all students invest more individual time to review the excercise.
Complete double linked list.
Class # 16 =======================
==================================
STACK INTRO
We reviewed ppt 9 Stacks Intro. With all the logic behind creating a simple stack.
TODO: complete stack_integers.c and stack_formula_validator.c as homework.
###################
   W E E K   # 9
###################
Class # 17 =======================
==================================
CHALLEGE! Starting coding the exercise to expand a linked list.
See expand.c for instructions.

Class # 18 =======================
==================================
FILES!
Text files, read and write from common txt files
Make the teams for the project (Maze game) 
See. Files.ppt
files_intro.c
files_practice.c

###################
   W E E K   # 10
###################
Class # 19 =======================
==================================
We worked in iteso_debt_rt_wb.c (read from text / write to binary) this is a file
where you learn to read  text, reconstruct an array of students using dynamic memory
and then dump that into binary file. You also need to follow the instructions to
create another file and read its content to verify it's working.

Reviewed the solution for files_practice.c
Reviewed formula valitador.

Class # 20 =======================
==================================
Completed summary.txt with things to study for exam
Class to finish iteso_debt_tb.c and any other pending file like double linkedlist


###################
   W E E K   # 11
###################

Class # 21 =======================
==================================
EXAM #2 (April 1st)
EXAM #2 (April 1st)
EXAM #2 (April 1st)
 

ALL ADTs we have seen:
On the video (home work)
date
vector
stack
queue
set
map
queue
 

Class # 22 =======================
==================================
Students saw ADT topic and completed home work (adt date).
Review exam solution.
Review adt_date
Work on ADT Stack, complete adt_stack/stack.h adt_stack/stack.c and use 
formulavalidator2.c to test it.


###################
   W E E K   # 12
###################

Class # 23 =======================
==================================
Queues class reviewed queue powerpoint and build the ADT queue
adt_queue/queue.c
adt_queue/queue.h
use_queue.c
Review theory and students work on implementation

Class # 24 =======================
==================================
Tree theory!
Review how to build and traverse trees 
Complete bst.c as far as you can.

###################
 SEMANA SANTAAAA
 ###################

###################
   W E E K   # 13
###################

Class # 25 =======================
==================================
Review the solution of bst.c
See theory for ADT SET (uses a tree)
15. sets.pptx

Class # 26 =======================
==================================
Code everything on the SET.
Hash Map theory
16. Maps - Hash tables.pptx

###################
   W E E K   # 14
###################
Class # 27 =======================
==================================
Review solution for use_set.c and set files.
Reviewed the power point presentation to draw the pseudo code around
the hashmap functions.

Class # 28 =======================
==================================
ONLINE CLASS:
Priority Queue theory.
Project description and deliver to students:
Today we reviewed the solution for the MAP, all files are ready in GitHub
We also saw the introduction for the Priority Queue (PQ) that will be used 
in the project. For this one we are doing the opposite approach, the code is 
ready (use_pq.c / pq.c and pq.h) your task is to try to understand how it works.
Finally the Project #3 was presented, it will be done in pairs. 
Please have your teammate ready for next class, review the PDF and the attached 
video if you missed the class 

###################
   W E E K   # 15
###################
Class # 29 =======================
==================================
Review a detailed example of how to build a huffman tree "Goool de Mexico!!!"
Review the inner details of how a priority queue works, heaps.
17. Priority Queues  (Heaps)

Review in detail 

Class # 30 =======================
==================================
FINAL REVIEW BEFORE EXAM
Class to Understand how all the ADT are used, so far we have seen.
Stack
Queue
set
Map
Trees
PQ (priority queue) Review the excercise done by hand

###################
   W E E K   # 16
###################

Class # 31 =======================
==================================
Exam 3 :) 

Class # 32 =======================
==================================
